// Code generated by protoc-gen-go. DO NOT EDIT.
// source: simple.proto

package schema_proto2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_simple_f9873694ed696628, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Simple struct {
	BoolField            *bool       `protobuf:"varint,1,opt,name=bool_field,json=boolField" json:"bool_field,omitempty"`
	BytesField           []byte      `protobuf:"bytes,3,opt,name=bytes_field,json=bytesField" json:"bytes_field,omitempty"`
	DoubleField          *float64    `protobuf:"fixed64,5,opt,name=double_field,json=doubleField" json:"double_field,omitempty"`
	Fixed32Field         *uint32     `protobuf:"fixed32,7,opt,name=fixed32_field,json=fixed32Field" json:"fixed32_field,omitempty"`
	Fixed64Field         *uint64     `protobuf:"fixed64,9,opt,name=fixed64_field,json=fixed64Field" json:"fixed64_field,omitempty"`
	FloatField           *float32    `protobuf:"fixed32,11,opt,name=float_field,json=floatField" json:"float_field,omitempty"`
	Int32Field           *int32      `protobuf:"varint,13,opt,name=int32_field,json=int32Field" json:"int32_field,omitempty"`
	Int64Field           *int64      `protobuf:"varint,15,opt,name=int64_field,json=int64Field" json:"int64_field,omitempty"`
	Sfixed32Field        *int32      `protobuf:"fixed32,17,opt,name=sfixed32_field,json=sfixed32Field" json:"sfixed32_field,omitempty"`
	Sfixed64Field        *int64      `protobuf:"fixed64,19,opt,name=sfixed64_field,json=sfixed64Field" json:"sfixed64_field,omitempty"`
	Sint32Field          *int32      `protobuf:"zigzag32,21,opt,name=sint32_field,json=sint32Field" json:"sint32_field,omitempty"`
	Sint64Field          *int64      `protobuf:"zigzag64,23,opt,name=sint64_field,json=sint64Field" json:"sint64_field,omitempty"`
	StringField          *string     `protobuf:"bytes,25,opt,name=string_field,json=stringField" json:"string_field,omitempty"`
	Uint32Field          *uint32     `protobuf:"varint,27,opt,name=uint32_field,json=uint32Field" json:"uint32_field,omitempty"`
	Uint64Field          *uint64     `protobuf:"varint,29,opt,name=uint64_field,json=uint64Field" json:"uint64_field,omitempty"`
	SimpleField          *Simple     `protobuf:"bytes,31,opt,name=simple_field,json=simpleField" json:"simple_field,omitempty"`
	RepetitiveField      *Repetitive `protobuf:"bytes,33,opt,name=repetitive_field,json=repetitiveField" json:"repetitive_field,omitempty"`
	SingletonField       *Singleton  `protobuf:"bytes,35,opt,name=singleton_field,json=singletonField" json:"singleton_field,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Simple) Reset()         { *m = Simple{} }
func (m *Simple) String() string { return proto.CompactTextString(m) }
func (*Simple) ProtoMessage()    {}
func (*Simple) Descriptor() ([]byte, []int) {
	return fileDescriptor_simple_f9873694ed696628, []int{1}
}
func (m *Simple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Simple.Unmarshal(m, b)
}
func (m *Simple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Simple.Marshal(b, m, deterministic)
}
func (dst *Simple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Simple.Merge(dst, src)
}
func (m *Simple) XXX_Size() int {
	return xxx_messageInfo_Simple.Size(m)
}
func (m *Simple) XXX_DiscardUnknown() {
	xxx_messageInfo_Simple.DiscardUnknown(m)
}

var xxx_messageInfo_Simple proto.InternalMessageInfo

func (m *Simple) GetBoolField() bool {
	if m != nil && m.BoolField != nil {
		return *m.BoolField
	}
	return false
}

func (m *Simple) GetBytesField() []byte {
	if m != nil {
		return m.BytesField
	}
	return nil
}

func (m *Simple) GetDoubleField() float64 {
	if m != nil && m.DoubleField != nil {
		return *m.DoubleField
	}
	return 0
}

func (m *Simple) GetFixed32Field() uint32 {
	if m != nil && m.Fixed32Field != nil {
		return *m.Fixed32Field
	}
	return 0
}

func (m *Simple) GetFixed64Field() uint64 {
	if m != nil && m.Fixed64Field != nil {
		return *m.Fixed64Field
	}
	return 0
}

func (m *Simple) GetFloatField() float32 {
	if m != nil && m.FloatField != nil {
		return *m.FloatField
	}
	return 0
}

func (m *Simple) GetInt32Field() int32 {
	if m != nil && m.Int32Field != nil {
		return *m.Int32Field
	}
	return 0
}

func (m *Simple) GetInt64Field() int64 {
	if m != nil && m.Int64Field != nil {
		return *m.Int64Field
	}
	return 0
}

func (m *Simple) GetSfixed32Field() int32 {
	if m != nil && m.Sfixed32Field != nil {
		return *m.Sfixed32Field
	}
	return 0
}

func (m *Simple) GetSfixed64Field() int64 {
	if m != nil && m.Sfixed64Field != nil {
		return *m.Sfixed64Field
	}
	return 0
}

func (m *Simple) GetSint32Field() int32 {
	if m != nil && m.Sint32Field != nil {
		return *m.Sint32Field
	}
	return 0
}

func (m *Simple) GetSint64Field() int64 {
	if m != nil && m.Sint64Field != nil {
		return *m.Sint64Field
	}
	return 0
}

func (m *Simple) GetStringField() string {
	if m != nil && m.StringField != nil {
		return *m.StringField
	}
	return ""
}

func (m *Simple) GetUint32Field() uint32 {
	if m != nil && m.Uint32Field != nil {
		return *m.Uint32Field
	}
	return 0
}

func (m *Simple) GetUint64Field() uint64 {
	if m != nil && m.Uint64Field != nil {
		return *m.Uint64Field
	}
	return 0
}

func (m *Simple) GetSimpleField() *Simple {
	if m != nil {
		return m.SimpleField
	}
	return nil
}

func (m *Simple) GetRepetitiveField() *Repetitive {
	if m != nil {
		return m.RepetitiveField
	}
	return nil
}

func (m *Simple) GetSingletonField() *Singleton {
	if m != nil {
		return m.SingletonField
	}
	return nil
}

type Repetitive struct {
	BoolField            []bool        `protobuf:"varint,1,rep,name=bool_field,json=boolField" json:"bool_field,omitempty"`
	BytesField           [][]byte      `protobuf:"bytes,3,rep,name=bytes_field,json=bytesField" json:"bytes_field,omitempty"`
	DoubleField          []float64     `protobuf:"fixed64,5,rep,name=double_field,json=doubleField" json:"double_field,omitempty"`
	Fixed32Field         []uint32      `protobuf:"fixed32,7,rep,name=fixed32_field,json=fixed32Field" json:"fixed32_field,omitempty"`
	Fixed64Field         []uint64      `protobuf:"fixed64,9,rep,name=fixed64_field,json=fixed64Field" json:"fixed64_field,omitempty"`
	FloatField           []float32     `protobuf:"fixed32,11,rep,name=float_field,json=floatField" json:"float_field,omitempty"`
	Int32Field           []int32       `protobuf:"varint,13,rep,name=int32_field,json=int32Field" json:"int32_field,omitempty"`
	Int64Field           []int64       `protobuf:"varint,15,rep,name=int64_field,json=int64Field" json:"int64_field,omitempty"`
	Sfixed32Field        []int32       `protobuf:"fixed32,17,rep,name=sfixed32_field,json=sfixed32Field" json:"sfixed32_field,omitempty"`
	Sfixed64Field        []int64       `protobuf:"fixed64,19,rep,name=sfixed64_field,json=sfixed64Field" json:"sfixed64_field,omitempty"`
	Sint32Field          []int32       `protobuf:"zigzag32,21,rep,name=sint32_field,json=sint32Field" json:"sint32_field,omitempty"`
	Sint64Field          []int64       `protobuf:"zigzag64,23,rep,name=sint64_field,json=sint64Field" json:"sint64_field,omitempty"`
	StringField          []string      `protobuf:"bytes,25,rep,name=string_field,json=stringField" json:"string_field,omitempty"`
	Uint32Field          []uint32      `protobuf:"varint,27,rep,name=uint32_field,json=uint32Field" json:"uint32_field,omitempty"`
	Uint64Field          []uint64      `protobuf:"varint,29,rep,name=uint64_field,json=uint64Field" json:"uint64_field,omitempty"`
	SimpleField          []*Simple     `protobuf:"bytes,31,rep,name=simple_field,json=simpleField" json:"simple_field,omitempty"`
	RepetitiveField      []*Repetitive `protobuf:"bytes,33,rep,name=repetitive_field,json=repetitiveField" json:"repetitive_field,omitempty"`
	SingletonField       []*Singleton  `protobuf:"bytes,35,rep,name=singleton_field,json=singletonField" json:"singleton_field,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Repetitive) Reset()         { *m = Repetitive{} }
func (m *Repetitive) String() string { return proto.CompactTextString(m) }
func (*Repetitive) ProtoMessage()    {}
func (*Repetitive) Descriptor() ([]byte, []int) {
	return fileDescriptor_simple_f9873694ed696628, []int{2}
}
func (m *Repetitive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Repetitive.Unmarshal(m, b)
}
func (m *Repetitive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Repetitive.Marshal(b, m, deterministic)
}
func (dst *Repetitive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repetitive.Merge(dst, src)
}
func (m *Repetitive) XXX_Size() int {
	return xxx_messageInfo_Repetitive.Size(m)
}
func (m *Repetitive) XXX_DiscardUnknown() {
	xxx_messageInfo_Repetitive.DiscardUnknown(m)
}

var xxx_messageInfo_Repetitive proto.InternalMessageInfo

func (m *Repetitive) GetBoolField() []bool {
	if m != nil {
		return m.BoolField
	}
	return nil
}

func (m *Repetitive) GetBytesField() [][]byte {
	if m != nil {
		return m.BytesField
	}
	return nil
}

func (m *Repetitive) GetDoubleField() []float64 {
	if m != nil {
		return m.DoubleField
	}
	return nil
}

func (m *Repetitive) GetFixed32Field() []uint32 {
	if m != nil {
		return m.Fixed32Field
	}
	return nil
}

func (m *Repetitive) GetFixed64Field() []uint64 {
	if m != nil {
		return m.Fixed64Field
	}
	return nil
}

func (m *Repetitive) GetFloatField() []float32 {
	if m != nil {
		return m.FloatField
	}
	return nil
}

func (m *Repetitive) GetInt32Field() []int32 {
	if m != nil {
		return m.Int32Field
	}
	return nil
}

func (m *Repetitive) GetInt64Field() []int64 {
	if m != nil {
		return m.Int64Field
	}
	return nil
}

func (m *Repetitive) GetSfixed32Field() []int32 {
	if m != nil {
		return m.Sfixed32Field
	}
	return nil
}

func (m *Repetitive) GetSfixed64Field() []int64 {
	if m != nil {
		return m.Sfixed64Field
	}
	return nil
}

func (m *Repetitive) GetSint32Field() []int32 {
	if m != nil {
		return m.Sint32Field
	}
	return nil
}

func (m *Repetitive) GetSint64Field() []int64 {
	if m != nil {
		return m.Sint64Field
	}
	return nil
}

func (m *Repetitive) GetStringField() []string {
	if m != nil {
		return m.StringField
	}
	return nil
}

func (m *Repetitive) GetUint32Field() []uint32 {
	if m != nil {
		return m.Uint32Field
	}
	return nil
}

func (m *Repetitive) GetUint64Field() []uint64 {
	if m != nil {
		return m.Uint64Field
	}
	return nil
}

func (m *Repetitive) GetSimpleField() []*Simple {
	if m != nil {
		return m.SimpleField
	}
	return nil
}

func (m *Repetitive) GetRepetitiveField() []*Repetitive {
	if m != nil {
		return m.RepetitiveField
	}
	return nil
}

func (m *Repetitive) GetSingletonField() []*Singleton {
	if m != nil {
		return m.SingletonField
	}
	return nil
}

type Singleton struct {
	// Types that are valid to be assigned to Singleton:
	//	*Singleton_TheBool
	//	*Singleton_TheBytes
	//	*Singleton_TheDouble
	//	*Singleton_TheFixed32
	//	*Singleton_TheFixed64
	//	*Singleton_TheFloat
	//	*Singleton_TheInt32
	//	*Singleton_TheInt64
	//	*Singleton_TheSfixed32
	//	*Singleton_TheSfixed64
	//	*Singleton_TheSint32
	//	*Singleton_TheSint64
	//	*Singleton_TheString
	//	*Singleton_TheUint32
	//	*Singleton_TheUint64
	//	*Singleton_TheSimple
	//	*Singleton_TheRepetitive
	//	*Singleton_TheSingleton
	Singleton            isSingleton_Singleton `protobuf_oneof:"singleton"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Singleton) Reset()         { *m = Singleton{} }
func (m *Singleton) String() string { return proto.CompactTextString(m) }
func (*Singleton) ProtoMessage()    {}
func (*Singleton) Descriptor() ([]byte, []int) {
	return fileDescriptor_simple_f9873694ed696628, []int{3}
}
func (m *Singleton) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Singleton.Unmarshal(m, b)
}
func (m *Singleton) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Singleton.Marshal(b, m, deterministic)
}
func (dst *Singleton) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Singleton.Merge(dst, src)
}
func (m *Singleton) XXX_Size() int {
	return xxx_messageInfo_Singleton.Size(m)
}
func (m *Singleton) XXX_DiscardUnknown() {
	xxx_messageInfo_Singleton.DiscardUnknown(m)
}

var xxx_messageInfo_Singleton proto.InternalMessageInfo

type isSingleton_Singleton interface {
	isSingleton_Singleton()
}

type Singleton_TheBool struct {
	TheBool bool `protobuf:"varint,1,opt,name=the_bool,json=theBool,oneof"`
}
type Singleton_TheBytes struct {
	TheBytes []byte `protobuf:"bytes,3,opt,name=the_bytes,json=theBytes,oneof"`
}
type Singleton_TheDouble struct {
	TheDouble float64 `protobuf:"fixed64,5,opt,name=the_double,json=theDouble,oneof"`
}
type Singleton_TheFixed32 struct {
	TheFixed32 uint32 `protobuf:"fixed32,7,opt,name=the_fixed32,json=theFixed32,oneof"`
}
type Singleton_TheFixed64 struct {
	TheFixed64 uint64 `protobuf:"fixed64,9,opt,name=the_fixed64,json=theFixed64,oneof"`
}
type Singleton_TheFloat struct {
	TheFloat float32 `protobuf:"fixed32,11,opt,name=the_float,json=theFloat,oneof"`
}
type Singleton_TheInt32 struct {
	TheInt32 int32 `protobuf:"varint,13,opt,name=the_int32,json=theInt32,oneof"`
}
type Singleton_TheInt64 struct {
	TheInt64 int64 `protobuf:"varint,15,opt,name=the_int64,json=theInt64,oneof"`
}
type Singleton_TheSfixed32 struct {
	TheSfixed32 int32 `protobuf:"fixed32,17,opt,name=the_sfixed32,json=theSfixed32,oneof"`
}
type Singleton_TheSfixed64 struct {
	TheSfixed64 int64 `protobuf:"fixed64,19,opt,name=the_sfixed64,json=theSfixed64,oneof"`
}
type Singleton_TheSint32 struct {
	TheSint32 int32 `protobuf:"zigzag32,21,opt,name=the_sint32,json=theSint32,oneof"`
}
type Singleton_TheSint64 struct {
	TheSint64 int64 `protobuf:"zigzag64,23,opt,name=the_sint64,json=theSint64,oneof"`
}
type Singleton_TheString struct {
	TheString string `protobuf:"bytes,25,opt,name=the_string,json=theString,oneof"`
}
type Singleton_TheUint32 struct {
	TheUint32 uint32 `protobuf:"varint,27,opt,name=the_uint32,json=theUint32,oneof"`
}
type Singleton_TheUint64 struct {
	TheUint64 uint64 `protobuf:"varint,29,opt,name=the_uint64,json=theUint64,oneof"`
}
type Singleton_TheSimple struct {
	TheSimple *Simple `protobuf:"bytes,31,opt,name=the_simple,json=theSimple,oneof"`
}
type Singleton_TheRepetitive struct {
	TheRepetitive *Repetitive `protobuf:"bytes,33,opt,name=the_repetitive,json=theRepetitive,oneof"`
}
type Singleton_TheSingleton struct {
	TheSingleton *Singleton `protobuf:"bytes,35,opt,name=the_singleton,json=theSingleton,oneof"`
}

func (*Singleton_TheBool) isSingleton_Singleton()       {}
func (*Singleton_TheBytes) isSingleton_Singleton()      {}
func (*Singleton_TheDouble) isSingleton_Singleton()     {}
func (*Singleton_TheFixed32) isSingleton_Singleton()    {}
func (*Singleton_TheFixed64) isSingleton_Singleton()    {}
func (*Singleton_TheFloat) isSingleton_Singleton()      {}
func (*Singleton_TheInt32) isSingleton_Singleton()      {}
func (*Singleton_TheInt64) isSingleton_Singleton()      {}
func (*Singleton_TheSfixed32) isSingleton_Singleton()   {}
func (*Singleton_TheSfixed64) isSingleton_Singleton()   {}
func (*Singleton_TheSint32) isSingleton_Singleton()     {}
func (*Singleton_TheSint64) isSingleton_Singleton()     {}
func (*Singleton_TheString) isSingleton_Singleton()     {}
func (*Singleton_TheUint32) isSingleton_Singleton()     {}
func (*Singleton_TheUint64) isSingleton_Singleton()     {}
func (*Singleton_TheSimple) isSingleton_Singleton()     {}
func (*Singleton_TheRepetitive) isSingleton_Singleton() {}
func (*Singleton_TheSingleton) isSingleton_Singleton()  {}

func (m *Singleton) GetSingleton() isSingleton_Singleton {
	if m != nil {
		return m.Singleton
	}
	return nil
}

func (m *Singleton) GetTheBool() bool {
	if x, ok := m.GetSingleton().(*Singleton_TheBool); ok {
		return x.TheBool
	}
	return false
}

func (m *Singleton) GetTheBytes() []byte {
	if x, ok := m.GetSingleton().(*Singleton_TheBytes); ok {
		return x.TheBytes
	}
	return nil
}

func (m *Singleton) GetTheDouble() float64 {
	if x, ok := m.GetSingleton().(*Singleton_TheDouble); ok {
		return x.TheDouble
	}
	return 0
}

func (m *Singleton) GetTheFixed32() uint32 {
	if x, ok := m.GetSingleton().(*Singleton_TheFixed32); ok {
		return x.TheFixed32
	}
	return 0
}

func (m *Singleton) GetTheFixed64() uint64 {
	if x, ok := m.GetSingleton().(*Singleton_TheFixed64); ok {
		return x.TheFixed64
	}
	return 0
}

func (m *Singleton) GetTheFloat() float32 {
	if x, ok := m.GetSingleton().(*Singleton_TheFloat); ok {
		return x.TheFloat
	}
	return 0
}

func (m *Singleton) GetTheInt32() int32 {
	if x, ok := m.GetSingleton().(*Singleton_TheInt32); ok {
		return x.TheInt32
	}
	return 0
}

func (m *Singleton) GetTheInt64() int64 {
	if x, ok := m.GetSingleton().(*Singleton_TheInt64); ok {
		return x.TheInt64
	}
	return 0
}

func (m *Singleton) GetTheSfixed32() int32 {
	if x, ok := m.GetSingleton().(*Singleton_TheSfixed32); ok {
		return x.TheSfixed32
	}
	return 0
}

func (m *Singleton) GetTheSfixed64() int64 {
	if x, ok := m.GetSingleton().(*Singleton_TheSfixed64); ok {
		return x.TheSfixed64
	}
	return 0
}

func (m *Singleton) GetTheSint32() int32 {
	if x, ok := m.GetSingleton().(*Singleton_TheSint32); ok {
		return x.TheSint32
	}
	return 0
}

func (m *Singleton) GetTheSint64() int64 {
	if x, ok := m.GetSingleton().(*Singleton_TheSint64); ok {
		return x.TheSint64
	}
	return 0
}

func (m *Singleton) GetTheString() string {
	if x, ok := m.GetSingleton().(*Singleton_TheString); ok {
		return x.TheString
	}
	return ""
}

func (m *Singleton) GetTheUint32() uint32 {
	if x, ok := m.GetSingleton().(*Singleton_TheUint32); ok {
		return x.TheUint32
	}
	return 0
}

func (m *Singleton) GetTheUint64() uint64 {
	if x, ok := m.GetSingleton().(*Singleton_TheUint64); ok {
		return x.TheUint64
	}
	return 0
}

func (m *Singleton) GetTheSimple() *Simple {
	if x, ok := m.GetSingleton().(*Singleton_TheSimple); ok {
		return x.TheSimple
	}
	return nil
}

func (m *Singleton) GetTheRepetitive() *Repetitive {
	if x, ok := m.GetSingleton().(*Singleton_TheRepetitive); ok {
		return x.TheRepetitive
	}
	return nil
}

func (m *Singleton) GetTheSingleton() *Singleton {
	if x, ok := m.GetSingleton().(*Singleton_TheSingleton); ok {
		return x.TheSingleton
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Singleton) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Singleton_OneofMarshaler, _Singleton_OneofUnmarshaler, _Singleton_OneofSizer, []interface{}{
		(*Singleton_TheBool)(nil),
		(*Singleton_TheBytes)(nil),
		(*Singleton_TheDouble)(nil),
		(*Singleton_TheFixed32)(nil),
		(*Singleton_TheFixed64)(nil),
		(*Singleton_TheFloat)(nil),
		(*Singleton_TheInt32)(nil),
		(*Singleton_TheInt64)(nil),
		(*Singleton_TheSfixed32)(nil),
		(*Singleton_TheSfixed64)(nil),
		(*Singleton_TheSint32)(nil),
		(*Singleton_TheSint64)(nil),
		(*Singleton_TheString)(nil),
		(*Singleton_TheUint32)(nil),
		(*Singleton_TheUint64)(nil),
		(*Singleton_TheSimple)(nil),
		(*Singleton_TheRepetitive)(nil),
		(*Singleton_TheSingleton)(nil),
	}
}

func _Singleton_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Singleton)
	// singleton
	switch x := m.Singleton.(type) {
	case *Singleton_TheBool:
		t := uint64(0)
		if x.TheBool {
			t = 1
		}
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Singleton_TheBytes:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.TheBytes)
	case *Singleton_TheDouble:
		b.EncodeVarint(5<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.TheDouble))
	case *Singleton_TheFixed32:
		b.EncodeVarint(7<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(x.TheFixed32))
	case *Singleton_TheFixed64:
		b.EncodeVarint(9<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.TheFixed64))
	case *Singleton_TheFloat:
		b.EncodeVarint(11<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.TheFloat)))
	case *Singleton_TheInt32:
		b.EncodeVarint(13<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TheInt32))
	case *Singleton_TheInt64:
		b.EncodeVarint(15<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TheInt64))
	case *Singleton_TheSfixed32:
		b.EncodeVarint(17<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(x.TheSfixed32))
	case *Singleton_TheSfixed64:
		b.EncodeVarint(19<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.TheSfixed64))
	case *Singleton_TheSint32:
		b.EncodeVarint(21<<3 | proto.WireVarint)
		b.EncodeZigzag32(uint64(x.TheSint32))
	case *Singleton_TheSint64:
		b.EncodeVarint(23<<3 | proto.WireVarint)
		b.EncodeZigzag64(uint64(x.TheSint64))
	case *Singleton_TheString:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.TheString)
	case *Singleton_TheUint32:
		b.EncodeVarint(27<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TheUint32))
	case *Singleton_TheUint64:
		b.EncodeVarint(29<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TheUint64))
	case *Singleton_TheSimple:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TheSimple); err != nil {
			return err
		}
	case *Singleton_TheRepetitive:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TheRepetitive); err != nil {
			return err
		}
	case *Singleton_TheSingleton:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TheSingleton); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Singleton.Singleton has unexpected type %T", x)
	}
	return nil
}

func _Singleton_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Singleton)
	switch tag {
	case 1: // singleton.the_bool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Singleton = &Singleton_TheBool{x != 0}
		return true, err
	case 3: // singleton.the_bytes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Singleton = &Singleton_TheBytes{x}
		return true, err
	case 5: // singleton.the_double
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Singleton = &Singleton_TheDouble{math.Float64frombits(x)}
		return true, err
	case 7: // singleton.the_fixed32
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Singleton = &Singleton_TheFixed32{uint32(x)}
		return true, err
	case 9: // singleton.the_fixed64
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Singleton = &Singleton_TheFixed64{x}
		return true, err
	case 11: // singleton.the_float
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Singleton = &Singleton_TheFloat{math.Float32frombits(uint32(x))}
		return true, err
	case 13: // singleton.the_int32
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Singleton = &Singleton_TheInt32{int32(x)}
		return true, err
	case 15: // singleton.the_int64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Singleton = &Singleton_TheInt64{int64(x)}
		return true, err
	case 17: // singleton.the_sfixed32
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Singleton = &Singleton_TheSfixed32{int32(x)}
		return true, err
	case 19: // singleton.the_sfixed64
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Singleton = &Singleton_TheSfixed64{int64(x)}
		return true, err
	case 21: // singleton.the_sint32
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag32()
		m.Singleton = &Singleton_TheSint32{int32(x)}
		return true, err
	case 23: // singleton.the_sint64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag64()
		m.Singleton = &Singleton_TheSint64{int64(x)}
		return true, err
	case 25: // singleton.the_string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Singleton = &Singleton_TheString{x}
		return true, err
	case 27: // singleton.the_uint32
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Singleton = &Singleton_TheUint32{uint32(x)}
		return true, err
	case 29: // singleton.the_uint64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Singleton = &Singleton_TheUint64{x}
		return true, err
	case 31: // singleton.the_simple
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Simple)
		err := b.DecodeMessage(msg)
		m.Singleton = &Singleton_TheSimple{msg}
		return true, err
	case 33: // singleton.the_repetitive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Repetitive)
		err := b.DecodeMessage(msg)
		m.Singleton = &Singleton_TheRepetitive{msg}
		return true, err
	case 35: // singleton.the_singleton
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Singleton)
		err := b.DecodeMessage(msg)
		m.Singleton = &Singleton_TheSingleton{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Singleton_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Singleton)
	// singleton
	switch x := m.Singleton.(type) {
	case *Singleton_TheBool:
		n += 1 // tag and wire
		n += 1
	case *Singleton_TheBytes:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.TheBytes)))
		n += len(x.TheBytes)
	case *Singleton_TheDouble:
		n += 1 // tag and wire
		n += 8
	case *Singleton_TheFixed32:
		n += 1 // tag and wire
		n += 4
	case *Singleton_TheFixed64:
		n += 1 // tag and wire
		n += 8
	case *Singleton_TheFloat:
		n += 1 // tag and wire
		n += 4
	case *Singleton_TheInt32:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.TheInt32))
	case *Singleton_TheInt64:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.TheInt64))
	case *Singleton_TheSfixed32:
		n += 2 // tag and wire
		n += 4
	case *Singleton_TheSfixed64:
		n += 2 // tag and wire
		n += 8
	case *Singleton_TheSint32:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64((uint32(x.TheSint32) << 1) ^ uint32((int32(x.TheSint32) >> 31))))
	case *Singleton_TheSint64:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(uint64(x.TheSint64<<1) ^ uint64((int64(x.TheSint64) >> 63))))
	case *Singleton_TheString:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(len(x.TheString)))
		n += len(x.TheString)
	case *Singleton_TheUint32:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(x.TheUint32))
	case *Singleton_TheUint64:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(x.TheUint64))
	case *Singleton_TheSimple:
		s := proto.Size(x.TheSimple)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Singleton_TheRepetitive:
		s := proto.Size(x.TheRepetitive)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Singleton_TheSingleton:
		s := proto.Size(x.TheSingleton)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Empty)(nil), "schema.proto2.Empty")
	proto.RegisterType((*Simple)(nil), "schema.proto2.Simple")
	proto.RegisterType((*Repetitive)(nil), "schema.proto2.Repetitive")
	proto.RegisterType((*Singleton)(nil), "schema.proto2.Singleton")
}

func init() { proto.RegisterFile("simple.proto", fileDescriptor_simple_f9873694ed696628) }

var fileDescriptor_simple_f9873694ed696628 = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x41, 0x4f, 0xdb, 0x30,
	0x14, 0xc7, 0xe3, 0x79, 0xa5, 0xf4, 0x25, 0xa1, 0x90, 0x09, 0x0d, 0x84, 0x10, 0x2e, 0x68, 0x92,
	0x4f, 0x1c, 0x58, 0x14, 0xed, 0x36, 0xad, 0x62, 0x28, 0xbb, 0x1a, 0xed, 0x8c, 0x60, 0x04, 0x1a,
	0x29, 0x34, 0x15, 0x71, 0xa7, 0xf1, 0xfd, 0xf6, 0x21, 0x76, 0xd8, 0x87, 0x99, 0xec, 0x67, 0xbb,
	0xce, 0x90, 0xe6, 0x4e, 0xdb, 0x09, 0xe5, 0xf9, 0xf7, 0xfc, 0x1e, 0xc9, 0x4f, 0xff, 0x42, 0xd2,
	0xd5, 0x0f, 0x8b, 0xa6, 0x3a, 0x5d, 0x3c, 0xb6, 0xb2, 0xcd, 0xd2, 0xee, 0xcb, 0xac, 0x7a, 0xb8,
	0xc6, 0xa7, 0xb3, 0xe3, 0x21, 0x0c, 0x3e, 0x3e, 0x2c, 0xe4, 0xd3, 0xf1, 0x8f, 0x01, 0x6c, 0x5c,
	0x6a, 0x30, 0x3b, 0x04, 0xb8, 0x69, 0xdb, 0xe6, 0xea, 0xae, 0xae, 0x9a, 0xdb, 0x3d, 0xc2, 0x08,
	0xdf, 0x14, 0x23, 0x55, 0xb9, 0x50, 0x85, 0xec, 0x08, 0xe2, 0x9b, 0x27, 0x59, 0x75, 0xe6, 0x9c,
	0x32, 0xc2, 0x13, 0x01, 0xba, 0x84, 0xc0, 0x04, 0x92, 0xdb, 0x76, 0x79, 0xd3, 0x54, 0x86, 0x18,
	0x30, 0xc2, 0x89, 0x88, 0xb1, 0x86, 0xc8, 0x09, 0xa4, 0x77, 0xf5, 0xb7, 0xea, 0xf6, 0xed, 0x99,
	0x61, 0x86, 0x8c, 0xf0, 0xa1, 0x48, 0x4c, 0xb1, 0x0f, 0x15, 0xb9, 0x81, 0x46, 0x8c, 0xf0, 0x0d,
	0x03, 0x15, 0xb9, 0xdb, 0xe6, 0xae, 0x69, 0xaf, 0xa5, 0x41, 0x62, 0x46, 0xf8, 0x0b, 0x01, 0xba,
	0xe4, 0x80, 0x7a, 0x2e, 0xdd, 0xa0, 0x94, 0x11, 0x3e, 0x10, 0xa0, 0x4b, 0x3e, 0xe0, 0x86, 0x8c,
	0x19, 0xe1, 0x54, 0x03, 0x76, 0xc4, 0x1b, 0xd8, 0xea, 0xfa, 0xdb, 0xee, 0x30, 0xc2, 0xc7, 0x22,
	0xed, 0x7a, 0xeb, 0x3a, 0xcc, 0x5d, 0xf5, 0x8a, 0x11, 0xbe, 0x6d, 0x31, 0x7b, 0xdb, 0x44, 0x7d,
	0x10, 0x6f, 0xa1, 0x5d, 0x46, 0xf8, 0x8e, 0x88, 0x3b, 0x6f, 0x23, 0x83, 0xb8, 0x7b, 0x5e, 0x33,
	0xc2, 0x33, 0x44, 0xfc, 0x5b, 0xe4, 0x63, 0x3d, 0xbf, 0x37, 0xc8, 0x3e, 0x23, 0x7c, 0x24, 0x62,
	0xac, 0x39, 0x64, 0xe9, 0x0f, 0x3a, 0x60, 0x84, 0xa7, 0x22, 0x5e, 0xf6, 0x07, 0x2d, 0xfd, 0x41,
	0x87, 0x8c, 0xf0, 0x97, 0x88, 0xd8, 0x41, 0xef, 0xac, 0x3f, 0x06, 0x39, 0x62, 0x84, 0xc7, 0x67,
	0xbb, 0xa7, 0x3d, 0x8d, 0x4e, 0xd1, 0x1c, 0xb5, 0xa2, 0xfa, 0x8b, 0x9d, 0xe7, 0xb0, 0xfd, 0x58,
	0x2d, 0x2a, 0x59, 0xcb, 0xfa, 0xab, 0xed, 0x9e, 0xe8, 0xee, 0xfd, 0xdf, 0xba, 0x85, 0xc3, 0xc4,
	0x78, 0xd5, 0x82, 0xb7, 0x7c, 0x80, 0x71, 0x57, 0xcf, 0xef, 0x9b, 0x4a, 0xb6, 0x73, 0x73, 0xc9,
	0x89, 0xbe, 0x64, 0xef, 0xd9, 0x0a, 0x86, 0x12, 0x5b, 0xae, 0x41, 0x5f, 0x71, 0xfc, 0x73, 0x00,
	0xb0, 0x1a, 0xf1, 0x4c, 0x6f, 0x1a, 0xd0, 0x9b, 0x06, 0xf5, 0xa6, 0x6b, 0xe8, 0x4d, 0xd7, 0xd1,
	0x9b, 0x86, 0xf5, 0xa6, 0x21, 0xbd, 0x69, 0x48, 0x6f, 0xba, 0x86, 0xde, 0x74, 0x3d, 0xbd, 0xe9,
	0x3a, 0x7a, 0xd3, 0xb0, 0xde, 0x34, 0xac, 0x37, 0x0d, 0xeb, 0x4d, 0xc3, 0x7a, 0xd3, 0xb0, 0xde,
	0xf4, 0x9f, 0xf4, 0xa6, 0xff, 0x43, 0x6f, 0xfa, 0x57, 0x7a, 0x7f, 0x1f, 0xc0, 0xc8, 0x9d, 0x66,
	0x07, 0xb0, 0x29, 0x67, 0xd5, 0x95, 0xf2, 0x19, 0xa3, 0xbb, 0x8c, 0xc4, 0x50, 0xce, 0xaa, 0x69,
	0xdb, 0x36, 0xd9, 0x21, 0x8c, 0xf4, 0xa1, 0x92, 0x19, 0x83, 0xbb, 0x8c, 0x84, 0xe2, 0xa7, 0xaa,
	0x92, 0x1d, 0x01, 0xa8, 0x63, 0x34, 0x19, 0x63, 0xbb, 0x8c, 0x84, 0x6a, 0x39, 0xd7, 0xa5, 0x6c,
	0x02, 0xb1, 0x02, 0x8c, 0x17, 0x18, 0xda, 0x65, 0x24, 0x54, 0xd7, 0x05, 0xd6, 0x7a, 0x48, 0x91,
	0x63, 0x64, 0xfb, 0x48, 0x91, 0xdb, 0x2d, 0xb4, 0xc4, 0x18, 0xd8, 0x66, 0x8b, 0x0b, 0x55, 0xb1,
	0xc7, 0xfa, 0x3b, 0x62, 0x5c, 0x9b, 0xe3, 0x4f, 0xaa, 0xe2, 0x1d, 0x17, 0x39, 0x86, 0xf5, 0xea,
	0xb8, 0xc8, 0xb3, 0x13, 0x48, 0xd4, 0xb1, 0x75, 0x17, 0xa3, 0xba, 0x8c, 0x84, 0xda, 0xea, 0xd2,
	0x14, 0xfb, 0x50, 0x91, 0x63, 0x50, 0xf7, 0xa0, 0x22, 0xb7, 0x6f, 0x03, 0xcd, 0xc5, 0x98, 0x36,
	0x6f, 0xe3, 0x52, 0x97, 0x7c, 0xa0, 0xc8, 0x31, 0xa4, 0x3d, 0xc0, 0xbb, 0x41, 0x5b, 0x8b, 0x11,
	0x6d, 0x01, 0x5d, 0xb2, 0x00, 0x3a, 0x8b, 0x01, 0x6d, 0x80, 0xcf, 0xbd, 0x11, 0x68, 0x2c, 0xc6,
	0xb3, 0x07, 0x14, 0x79, 0x56, 0xd8, 0x1d, 0x94, 0x98, 0x7f, 0x0c, 0x67, 0xb7, 0x9a, 0xfe, 0x8d,
	0x9f, 0xc2, 0x96, 0xea, 0x5b, 0xe9, 0x18, 0x8c, 0xe6, 0x32, 0x12, 0xa9, 0x9c, 0x55, 0x5e, 0x90,
	0xbe, 0x87, 0xd4, 0xfc, 0xff, 0xe8, 0x5e, 0x28, 0x98, 0xcb, 0x48, 0x24, 0xf8, 0x72, 0xf0, 0x79,
	0x1a, 0xc3, 0xc8, 0x35, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x19, 0xb0, 0x5a, 0x60, 0xa7, 0x08,
	0x00, 0x00,
}
