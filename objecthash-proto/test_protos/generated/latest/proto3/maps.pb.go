// Code generated by protoc-gen-go. DO NOT EDIT.
// source: maps.proto

package schema_proto3

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BoolMaps struct {
	BoolToBool           map[bool]bool        `protobuf:"bytes,1,rep,name=bool_to_bool,json=boolToBool" json:"bool_to_bool,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	BoolToBytes          map[bool][]byte      `protobuf:"bytes,2,rep,name=bool_to_bytes,json=boolToBytes" json:"bool_to_bytes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolToDouble         map[bool]float64     `protobuf:"bytes,3,rep,name=bool_to_double,json=boolToDouble" json:"bool_to_double,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BoolToFixed32        map[bool]uint32      `protobuf:"bytes,4,rep,name=bool_to_fixed32,json=boolToFixed32" json:"bool_to_fixed32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	BoolToFixed64        map[bool]uint64      `protobuf:"bytes,5,rep,name=bool_to_fixed64,json=boolToFixed64" json:"bool_to_fixed64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BoolToFloat          map[bool]float32     `protobuf:"bytes,6,rep,name=bool_to_float,json=boolToFloat" json:"bool_to_float,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	BoolToInt32          map[bool]int32       `protobuf:"bytes,7,rep,name=bool_to_int32,json=boolToInt32" json:"bool_to_int32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	BoolToInt64          map[bool]int64       `protobuf:"bytes,8,rep,name=bool_to_int64,json=boolToInt64" json:"bool_to_int64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	BoolToSfixed32       map[bool]int32       `protobuf:"bytes,9,rep,name=bool_to_sfixed32,json=boolToSfixed32" json:"bool_to_sfixed32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	BoolToSfixed64       map[bool]int64       `protobuf:"bytes,10,rep,name=bool_to_sfixed64,json=boolToSfixed64" json:"bool_to_sfixed64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BoolToSint32         map[bool]int32       `protobuf:"bytes,11,rep,name=bool_to_sint32,json=boolToSint32" json:"bool_to_sint32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	BoolToSint64         map[bool]int64       `protobuf:"bytes,12,rep,name=bool_to_sint64,json=boolToSint64" json:"bool_to_sint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	BoolToString         map[bool]string      `protobuf:"bytes,13,rep,name=bool_to_string,json=boolToString" json:"bool_to_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BoolToUint32         map[bool]uint32      `protobuf:"bytes,14,rep,name=bool_to_uint32,json=boolToUint32" json:"bool_to_uint32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	BoolToUint64         map[bool]uint64      `protobuf:"bytes,15,rep,name=bool_to_uint64,json=boolToUint64" json:"bool_to_uint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	BoolToPlanetV1       map[bool]PlanetV1    `protobuf:"bytes,16,rep,name=bool_to_planet_v1,json=boolToPlanetV1" json:"bool_to_planet_v1,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=schema.proto3.PlanetV1"`
	BoolToSimple         map[bool]*Simple     `protobuf:"bytes,17,rep,name=bool_to_simple,json=boolToSimple" json:"bool_to_simple,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BoolToRepetitive     map[bool]*Repetitive `protobuf:"bytes,18,rep,name=bool_to_repetitive,json=boolToRepetitive" json:"bool_to_repetitive,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BoolToSingleton      map[bool]*Singleton  `protobuf:"bytes,19,rep,name=bool_to_singleton,json=boolToSingleton" json:"bool_to_singleton,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BoolMaps) Reset()         { *m = BoolMaps{} }
func (m *BoolMaps) String() string { return proto.CompactTextString(m) }
func (*BoolMaps) ProtoMessage()    {}
func (*BoolMaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_maps_c4e2c00c34fdcade, []int{0}
}
func (m *BoolMaps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolMaps.Unmarshal(m, b)
}
func (m *BoolMaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolMaps.Marshal(b, m, deterministic)
}
func (dst *BoolMaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolMaps.Merge(dst, src)
}
func (m *BoolMaps) XXX_Size() int {
	return xxx_messageInfo_BoolMaps.Size(m)
}
func (m *BoolMaps) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolMaps.DiscardUnknown(m)
}

var xxx_messageInfo_BoolMaps proto.InternalMessageInfo

func (m *BoolMaps) GetBoolToBool() map[bool]bool {
	if m != nil {
		return m.BoolToBool
	}
	return nil
}

func (m *BoolMaps) GetBoolToBytes() map[bool][]byte {
	if m != nil {
		return m.BoolToBytes
	}
	return nil
}

func (m *BoolMaps) GetBoolToDouble() map[bool]float64 {
	if m != nil {
		return m.BoolToDouble
	}
	return nil
}

func (m *BoolMaps) GetBoolToFixed32() map[bool]uint32 {
	if m != nil {
		return m.BoolToFixed32
	}
	return nil
}

func (m *BoolMaps) GetBoolToFixed64() map[bool]uint64 {
	if m != nil {
		return m.BoolToFixed64
	}
	return nil
}

func (m *BoolMaps) GetBoolToFloat() map[bool]float32 {
	if m != nil {
		return m.BoolToFloat
	}
	return nil
}

func (m *BoolMaps) GetBoolToInt32() map[bool]int32 {
	if m != nil {
		return m.BoolToInt32
	}
	return nil
}

func (m *BoolMaps) GetBoolToInt64() map[bool]int64 {
	if m != nil {
		return m.BoolToInt64
	}
	return nil
}

func (m *BoolMaps) GetBoolToSfixed32() map[bool]int32 {
	if m != nil {
		return m.BoolToSfixed32
	}
	return nil
}

func (m *BoolMaps) GetBoolToSfixed64() map[bool]int64 {
	if m != nil {
		return m.BoolToSfixed64
	}
	return nil
}

func (m *BoolMaps) GetBoolToSint32() map[bool]int32 {
	if m != nil {
		return m.BoolToSint32
	}
	return nil
}

func (m *BoolMaps) GetBoolToSint64() map[bool]int64 {
	if m != nil {
		return m.BoolToSint64
	}
	return nil
}

func (m *BoolMaps) GetBoolToString() map[bool]string {
	if m != nil {
		return m.BoolToString
	}
	return nil
}

func (m *BoolMaps) GetBoolToUint32() map[bool]uint32 {
	if m != nil {
		return m.BoolToUint32
	}
	return nil
}

func (m *BoolMaps) GetBoolToUint64() map[bool]uint64 {
	if m != nil {
		return m.BoolToUint64
	}
	return nil
}

func (m *BoolMaps) GetBoolToPlanetV1() map[bool]PlanetV1 {
	if m != nil {
		return m.BoolToPlanetV1
	}
	return nil
}

func (m *BoolMaps) GetBoolToSimple() map[bool]*Simple {
	if m != nil {
		return m.BoolToSimple
	}
	return nil
}

func (m *BoolMaps) GetBoolToRepetitive() map[bool]*Repetitive {
	if m != nil {
		return m.BoolToRepetitive
	}
	return nil
}

func (m *BoolMaps) GetBoolToSingleton() map[bool]*Singleton {
	if m != nil {
		return m.BoolToSingleton
	}
	return nil
}

// This also covers the cases where the key type is of a similar int value.
// ex: fixed32, fixed64, int32, sfixed32, sfixed64, sint32, sint64, uint32,
//     uint64
type IntMaps struct {
	IntToBool            map[int64]bool        `protobuf:"bytes,1,rep,name=int_to_bool,json=intToBool" json:"int_to_bool,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	IntToBytes           map[int64][]byte      `protobuf:"bytes,2,rep,name=int_to_bytes,json=intToBytes" json:"int_to_bytes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntToDouble          map[int64]float64     `protobuf:"bytes,3,rep,name=int_to_double,json=intToDouble" json:"int_to_double,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	IntToFixed32         map[int64]uint32      `protobuf:"bytes,4,rep,name=int_to_fixed32,json=intToFixed32" json:"int_to_fixed32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	IntToFixed64         map[int64]uint64      `protobuf:"bytes,5,rep,name=int_to_fixed64,json=intToFixed64" json:"int_to_fixed64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	IntToFloat           map[int64]float32     `protobuf:"bytes,6,rep,name=int_to_float,json=intToFloat" json:"int_to_float,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	IntToInt32           map[int64]int32       `protobuf:"bytes,7,rep,name=int_to_int32,json=intToInt32" json:"int_to_int32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	IntToInt64           map[int64]int64       `protobuf:"bytes,8,rep,name=int_to_int64,json=intToInt64" json:"int_to_int64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	IntToSfixed32        map[int64]int32       `protobuf:"bytes,9,rep,name=int_to_sfixed32,json=intToSfixed32" json:"int_to_sfixed32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	IntToSfixed64        map[int64]int64       `protobuf:"bytes,10,rep,name=int_to_sfixed64,json=intToSfixed64" json:"int_to_sfixed64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	IntToSint32          map[int64]int32       `protobuf:"bytes,11,rep,name=int_to_sint32,json=intToSint32" json:"int_to_sint32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	IntToSint64          map[int64]int64       `protobuf:"bytes,12,rep,name=int_to_sint64,json=intToSint64" json:"int_to_sint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	IntToString          map[int64]string      `protobuf:"bytes,13,rep,name=int_to_string,json=intToString" json:"int_to_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IntToUint32          map[int64]uint32      `protobuf:"bytes,14,rep,name=int_to_uint32,json=intToUint32" json:"int_to_uint32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	IntToUint64          map[int64]uint64      `protobuf:"bytes,15,rep,name=int_to_uint64,json=intToUint64" json:"int_to_uint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	IntToPlanetV1        map[int64]PlanetV1    `protobuf:"bytes,16,rep,name=int_to_planet_v1,json=intToPlanetV1" json:"int_to_planet_v1,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=schema.proto3.PlanetV1"`
	IntToSimple          map[int64]*Simple     `protobuf:"bytes,17,rep,name=int_to_simple,json=intToSimple" json:"int_to_simple,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IntToRepetitive      map[int64]*Repetitive `protobuf:"bytes,18,rep,name=int_to_repetitive,json=intToRepetitive" json:"int_to_repetitive,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IntToSingleton       map[int64]*Singleton  `protobuf:"bytes,19,rep,name=int_to_singleton,json=intToSingleton" json:"int_to_singleton,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IntMaps) Reset()         { *m = IntMaps{} }
func (m *IntMaps) String() string { return proto.CompactTextString(m) }
func (*IntMaps) ProtoMessage()    {}
func (*IntMaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_maps_c4e2c00c34fdcade, []int{1}
}
func (m *IntMaps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntMaps.Unmarshal(m, b)
}
func (m *IntMaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntMaps.Marshal(b, m, deterministic)
}
func (dst *IntMaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntMaps.Merge(dst, src)
}
func (m *IntMaps) XXX_Size() int {
	return xxx_messageInfo_IntMaps.Size(m)
}
func (m *IntMaps) XXX_DiscardUnknown() {
	xxx_messageInfo_IntMaps.DiscardUnknown(m)
}

var xxx_messageInfo_IntMaps proto.InternalMessageInfo

func (m *IntMaps) GetIntToBool() map[int64]bool {
	if m != nil {
		return m.IntToBool
	}
	return nil
}

func (m *IntMaps) GetIntToBytes() map[int64][]byte {
	if m != nil {
		return m.IntToBytes
	}
	return nil
}

func (m *IntMaps) GetIntToDouble() map[int64]float64 {
	if m != nil {
		return m.IntToDouble
	}
	return nil
}

func (m *IntMaps) GetIntToFixed32() map[int64]uint32 {
	if m != nil {
		return m.IntToFixed32
	}
	return nil
}

func (m *IntMaps) GetIntToFixed64() map[int64]uint64 {
	if m != nil {
		return m.IntToFixed64
	}
	return nil
}

func (m *IntMaps) GetIntToFloat() map[int64]float32 {
	if m != nil {
		return m.IntToFloat
	}
	return nil
}

func (m *IntMaps) GetIntToInt32() map[int64]int32 {
	if m != nil {
		return m.IntToInt32
	}
	return nil
}

func (m *IntMaps) GetIntToInt64() map[int64]int64 {
	if m != nil {
		return m.IntToInt64
	}
	return nil
}

func (m *IntMaps) GetIntToSfixed32() map[int64]int32 {
	if m != nil {
		return m.IntToSfixed32
	}
	return nil
}

func (m *IntMaps) GetIntToSfixed64() map[int64]int64 {
	if m != nil {
		return m.IntToSfixed64
	}
	return nil
}

func (m *IntMaps) GetIntToSint32() map[int64]int32 {
	if m != nil {
		return m.IntToSint32
	}
	return nil
}

func (m *IntMaps) GetIntToSint64() map[int64]int64 {
	if m != nil {
		return m.IntToSint64
	}
	return nil
}

func (m *IntMaps) GetIntToString() map[int64]string {
	if m != nil {
		return m.IntToString
	}
	return nil
}

func (m *IntMaps) GetIntToUint32() map[int64]uint32 {
	if m != nil {
		return m.IntToUint32
	}
	return nil
}

func (m *IntMaps) GetIntToUint64() map[int64]uint64 {
	if m != nil {
		return m.IntToUint64
	}
	return nil
}

func (m *IntMaps) GetIntToPlanetV1() map[int64]PlanetV1 {
	if m != nil {
		return m.IntToPlanetV1
	}
	return nil
}

func (m *IntMaps) GetIntToSimple() map[int64]*Simple {
	if m != nil {
		return m.IntToSimple
	}
	return nil
}

func (m *IntMaps) GetIntToRepetitive() map[int64]*Repetitive {
	if m != nil {
		return m.IntToRepetitive
	}
	return nil
}

func (m *IntMaps) GetIntToSingleton() map[int64]*Singleton {
	if m != nil {
		return m.IntToSingleton
	}
	return nil
}

type StringMaps struct {
	StringToBool         map[string]bool        `protobuf:"bytes,1,rep,name=string_to_bool,json=stringToBool" json:"string_to_bool,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringToBytes        map[string][]byte      `protobuf:"bytes,2,rep,name=string_to_bytes,json=stringToBytes" json:"string_to_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringToDouble       map[string]float64     `protobuf:"bytes,3,rep,name=string_to_double,json=stringToDouble" json:"string_to_double,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	StringToFixed32      map[string]uint32      `protobuf:"bytes,4,rep,name=string_to_fixed32,json=stringToFixed32" json:"string_to_fixed32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	StringToFixed64      map[string]uint64      `protobuf:"bytes,5,rep,name=string_to_fixed64,json=stringToFixed64" json:"string_to_fixed64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	StringToFloat        map[string]float32     `protobuf:"bytes,6,rep,name=string_to_float,json=stringToFloat" json:"string_to_float,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	StringToInt32        map[string]int32       `protobuf:"bytes,7,rep,name=string_to_int32,json=stringToInt32" json:"string_to_int32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringToInt64        map[string]int64       `protobuf:"bytes,8,rep,name=string_to_int64,json=stringToInt64" json:"string_to_int64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringToSfixed32     map[string]int32       `protobuf:"bytes,9,rep,name=string_to_sfixed32,json=stringToSfixed32" json:"string_to_sfixed32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	StringToSfixed64     map[string]int64       `protobuf:"bytes,10,rep,name=string_to_sfixed64,json=stringToSfixed64" json:"string_to_sfixed64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	StringToSint32       map[string]int32       `protobuf:"bytes,11,rep,name=string_to_sint32,json=stringToSint32" json:"string_to_sint32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	StringToSint64       map[string]int64       `protobuf:"bytes,12,rep,name=string_to_sint64,json=stringToSint64" json:"string_to_sint64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	StringToString       map[string]string      `protobuf:"bytes,13,rep,name=string_to_string,json=stringToString" json:"string_to_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToUint32       map[string]uint32      `protobuf:"bytes,14,rep,name=string_to_uint32,json=stringToUint32" json:"string_to_uint32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringToUint64       map[string]uint64      `protobuf:"bytes,15,rep,name=string_to_uint64,json=stringToUint64" json:"string_to_uint64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringToPlanetV1     map[string]PlanetV1    `protobuf:"bytes,16,rep,name=string_to_planet_v1,json=stringToPlanetV1" json:"string_to_planet_v1,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=schema.proto3.PlanetV1"`
	StringToSimple       map[string]*Simple     `protobuf:"bytes,17,rep,name=string_to_simple,json=stringToSimple" json:"string_to_simple,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToRepetitive   map[string]*Repetitive `protobuf:"bytes,18,rep,name=string_to_repetitive,json=stringToRepetitive" json:"string_to_repetitive,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToSingleton    map[string]*Singleton  `protobuf:"bytes,19,rep,name=string_to_singleton,json=stringToSingleton" json:"string_to_singleton,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StringMaps) Reset()         { *m = StringMaps{} }
func (m *StringMaps) String() string { return proto.CompactTextString(m) }
func (*StringMaps) ProtoMessage()    {}
func (*StringMaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_maps_c4e2c00c34fdcade, []int{2}
}
func (m *StringMaps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringMaps.Unmarshal(m, b)
}
func (m *StringMaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringMaps.Marshal(b, m, deterministic)
}
func (dst *StringMaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMaps.Merge(dst, src)
}
func (m *StringMaps) XXX_Size() int {
	return xxx_messageInfo_StringMaps.Size(m)
}
func (m *StringMaps) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMaps.DiscardUnknown(m)
}

var xxx_messageInfo_StringMaps proto.InternalMessageInfo

func (m *StringMaps) GetStringToBool() map[string]bool {
	if m != nil {
		return m.StringToBool
	}
	return nil
}

func (m *StringMaps) GetStringToBytes() map[string][]byte {
	if m != nil {
		return m.StringToBytes
	}
	return nil
}

func (m *StringMaps) GetStringToDouble() map[string]float64 {
	if m != nil {
		return m.StringToDouble
	}
	return nil
}

func (m *StringMaps) GetStringToFixed32() map[string]uint32 {
	if m != nil {
		return m.StringToFixed32
	}
	return nil
}

func (m *StringMaps) GetStringToFixed64() map[string]uint64 {
	if m != nil {
		return m.StringToFixed64
	}
	return nil
}

func (m *StringMaps) GetStringToFloat() map[string]float32 {
	if m != nil {
		return m.StringToFloat
	}
	return nil
}

func (m *StringMaps) GetStringToInt32() map[string]int32 {
	if m != nil {
		return m.StringToInt32
	}
	return nil
}

func (m *StringMaps) GetStringToInt64() map[string]int64 {
	if m != nil {
		return m.StringToInt64
	}
	return nil
}

func (m *StringMaps) GetStringToSfixed32() map[string]int32 {
	if m != nil {
		return m.StringToSfixed32
	}
	return nil
}

func (m *StringMaps) GetStringToSfixed64() map[string]int64 {
	if m != nil {
		return m.StringToSfixed64
	}
	return nil
}

func (m *StringMaps) GetStringToSint32() map[string]int32 {
	if m != nil {
		return m.StringToSint32
	}
	return nil
}

func (m *StringMaps) GetStringToSint64() map[string]int64 {
	if m != nil {
		return m.StringToSint64
	}
	return nil
}

func (m *StringMaps) GetStringToString() map[string]string {
	if m != nil {
		return m.StringToString
	}
	return nil
}

func (m *StringMaps) GetStringToUint32() map[string]uint32 {
	if m != nil {
		return m.StringToUint32
	}
	return nil
}

func (m *StringMaps) GetStringToUint64() map[string]uint64 {
	if m != nil {
		return m.StringToUint64
	}
	return nil
}

func (m *StringMaps) GetStringToPlanetV1() map[string]PlanetV1 {
	if m != nil {
		return m.StringToPlanetV1
	}
	return nil
}

func (m *StringMaps) GetStringToSimple() map[string]*Simple {
	if m != nil {
		return m.StringToSimple
	}
	return nil
}

func (m *StringMaps) GetStringToRepetitive() map[string]*Repetitive {
	if m != nil {
		return m.StringToRepetitive
	}
	return nil
}

func (m *StringMaps) GetStringToSingleton() map[string]*Singleton {
	if m != nil {
		return m.StringToSingleton
	}
	return nil
}

func init() {
	proto.RegisterType((*BoolMaps)(nil), "schema.proto3.BoolMaps")
	proto.RegisterMapType((map[bool]bool)(nil), "schema.proto3.BoolMaps.BoolToBoolEntry")
	proto.RegisterMapType((map[bool][]byte)(nil), "schema.proto3.BoolMaps.BoolToBytesEntry")
	proto.RegisterMapType((map[bool]float64)(nil), "schema.proto3.BoolMaps.BoolToDoubleEntry")
	proto.RegisterMapType((map[bool]uint32)(nil), "schema.proto3.BoolMaps.BoolToFixed32Entry")
	proto.RegisterMapType((map[bool]uint64)(nil), "schema.proto3.BoolMaps.BoolToFixed64Entry")
	proto.RegisterMapType((map[bool]float32)(nil), "schema.proto3.BoolMaps.BoolToFloatEntry")
	proto.RegisterMapType((map[bool]int32)(nil), "schema.proto3.BoolMaps.BoolToInt32Entry")
	proto.RegisterMapType((map[bool]int64)(nil), "schema.proto3.BoolMaps.BoolToInt64Entry")
	proto.RegisterMapType((map[bool]PlanetV1)(nil), "schema.proto3.BoolMaps.BoolToPlanetV1Entry")
	proto.RegisterMapType((map[bool]*Repetitive)(nil), "schema.proto3.BoolMaps.BoolToRepetitiveEntry")
	proto.RegisterMapType((map[bool]int32)(nil), "schema.proto3.BoolMaps.BoolToSfixed32Entry")
	proto.RegisterMapType((map[bool]int64)(nil), "schema.proto3.BoolMaps.BoolToSfixed64Entry")
	proto.RegisterMapType((map[bool]*Simple)(nil), "schema.proto3.BoolMaps.BoolToSimpleEntry")
	proto.RegisterMapType((map[bool]*Singleton)(nil), "schema.proto3.BoolMaps.BoolToSingletonEntry")
	proto.RegisterMapType((map[bool]int32)(nil), "schema.proto3.BoolMaps.BoolToSint32Entry")
	proto.RegisterMapType((map[bool]int64)(nil), "schema.proto3.BoolMaps.BoolToSint64Entry")
	proto.RegisterMapType((map[bool]string)(nil), "schema.proto3.BoolMaps.BoolToStringEntry")
	proto.RegisterMapType((map[bool]uint32)(nil), "schema.proto3.BoolMaps.BoolToUint32Entry")
	proto.RegisterMapType((map[bool]uint64)(nil), "schema.proto3.BoolMaps.BoolToUint64Entry")
	proto.RegisterType((*IntMaps)(nil), "schema.proto3.IntMaps")
	proto.RegisterMapType((map[int64]bool)(nil), "schema.proto3.IntMaps.IntToBoolEntry")
	proto.RegisterMapType((map[int64][]byte)(nil), "schema.proto3.IntMaps.IntToBytesEntry")
	proto.RegisterMapType((map[int64]float64)(nil), "schema.proto3.IntMaps.IntToDoubleEntry")
	proto.RegisterMapType((map[int64]uint32)(nil), "schema.proto3.IntMaps.IntToFixed32Entry")
	proto.RegisterMapType((map[int64]uint64)(nil), "schema.proto3.IntMaps.IntToFixed64Entry")
	proto.RegisterMapType((map[int64]float32)(nil), "schema.proto3.IntMaps.IntToFloatEntry")
	proto.RegisterMapType((map[int64]int32)(nil), "schema.proto3.IntMaps.IntToInt32Entry")
	proto.RegisterMapType((map[int64]int64)(nil), "schema.proto3.IntMaps.IntToInt64Entry")
	proto.RegisterMapType((map[int64]PlanetV1)(nil), "schema.proto3.IntMaps.IntToPlanetV1Entry")
	proto.RegisterMapType((map[int64]*Repetitive)(nil), "schema.proto3.IntMaps.IntToRepetitiveEntry")
	proto.RegisterMapType((map[int64]int32)(nil), "schema.proto3.IntMaps.IntToSfixed32Entry")
	proto.RegisterMapType((map[int64]int64)(nil), "schema.proto3.IntMaps.IntToSfixed64Entry")
	proto.RegisterMapType((map[int64]*Simple)(nil), "schema.proto3.IntMaps.IntToSimpleEntry")
	proto.RegisterMapType((map[int64]*Singleton)(nil), "schema.proto3.IntMaps.IntToSingletonEntry")
	proto.RegisterMapType((map[int64]int32)(nil), "schema.proto3.IntMaps.IntToSint32Entry")
	proto.RegisterMapType((map[int64]int64)(nil), "schema.proto3.IntMaps.IntToSint64Entry")
	proto.RegisterMapType((map[int64]string)(nil), "schema.proto3.IntMaps.IntToStringEntry")
	proto.RegisterMapType((map[int64]uint32)(nil), "schema.proto3.IntMaps.IntToUint32Entry")
	proto.RegisterMapType((map[int64]uint64)(nil), "schema.proto3.IntMaps.IntToUint64Entry")
	proto.RegisterType((*StringMaps)(nil), "schema.proto3.StringMaps")
	proto.RegisterMapType((map[string]bool)(nil), "schema.proto3.StringMaps.StringToBoolEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "schema.proto3.StringMaps.StringToBytesEntry")
	proto.RegisterMapType((map[string]float64)(nil), "schema.proto3.StringMaps.StringToDoubleEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "schema.proto3.StringMaps.StringToFixed32Entry")
	proto.RegisterMapType((map[string]uint64)(nil), "schema.proto3.StringMaps.StringToFixed64Entry")
	proto.RegisterMapType((map[string]float32)(nil), "schema.proto3.StringMaps.StringToFloatEntry")
	proto.RegisterMapType((map[string]int32)(nil), "schema.proto3.StringMaps.StringToInt32Entry")
	proto.RegisterMapType((map[string]int64)(nil), "schema.proto3.StringMaps.StringToInt64Entry")
	proto.RegisterMapType((map[string]PlanetV1)(nil), "schema.proto3.StringMaps.StringToPlanetV1Entry")
	proto.RegisterMapType((map[string]*Repetitive)(nil), "schema.proto3.StringMaps.StringToRepetitiveEntry")
	proto.RegisterMapType((map[string]int32)(nil), "schema.proto3.StringMaps.StringToSfixed32Entry")
	proto.RegisterMapType((map[string]int64)(nil), "schema.proto3.StringMaps.StringToSfixed64Entry")
	proto.RegisterMapType((map[string]*Simple)(nil), "schema.proto3.StringMaps.StringToSimpleEntry")
	proto.RegisterMapType((map[string]*Singleton)(nil), "schema.proto3.StringMaps.StringToSingletonEntry")
	proto.RegisterMapType((map[string]int32)(nil), "schema.proto3.StringMaps.StringToSint32Entry")
	proto.RegisterMapType((map[string]int64)(nil), "schema.proto3.StringMaps.StringToSint64Entry")
	proto.RegisterMapType((map[string]string)(nil), "schema.proto3.StringMaps.StringToStringEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "schema.proto3.StringMaps.StringToUint32Entry")
	proto.RegisterMapType((map[string]uint64)(nil), "schema.proto3.StringMaps.StringToUint64Entry")
}

func init() { proto.RegisterFile("maps.proto", fileDescriptor_maps_c4e2c00c34fdcade) }

var fileDescriptor_maps_c4e2c00c34fdcade = []byte{
	// 1521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x98, 0xfd, 0x6e, 0xdb, 0x36,
	0x10, 0xc0, 0xe1, 0xa8, 0x4d, 0xe2, 0xf3, 0x87, 0x6c, 0xe6, 0xa3, 0x5a, 0xfe, 0x2a, 0x0a, 0x6c,
	0x4d, 0x9b, 0x26, 0x5d, 0x12, 0xc3, 0x18, 0x86, 0x75, 0xeb, 0xba, 0xb5, 0x58, 0xb0, 0xcf, 0xa6,
	0x71, 0xda, 0xb5, 0x6b, 0x52, 0xbb, 0x55, 0x3a, 0x61, 0x8e, 0x6d, 0x44, 0x4a, 0xb0, 0xbc, 0xc2,
	0x1e, 0x65, 0x8f, 0xb6, 0xa7, 0x18, 0x24, 0x8a, 0xe4, 0x1d, 0x45, 0x89, 0x84, 0xff, 0x49, 0xac,
	0x0b, 0xf9, 0x0b, 0x79, 0x3c, 0x9c, 0x7e, 0x34, 0xc0, 0xf9, 0x70, 0x16, 0xef, 0xcc, 0x2e, 0xa6,
	0xc9, 0x94, 0xb5, 0xe2, 0xf7, 0x7f, 0x86, 0xe7, 0x43, 0xfe, 0xb4, 0xbf, 0xd1, 0x8c, 0xa3, 0xf3,
	0xd9, 0x38, 0xe4, 0x8f, 0x1b, 0xad, 0xd9, 0x78, 0x38, 0x09, 0x93, 0x7c, 0xec, 0x9d, 0xff, 0xd6,
	0x61, 0xf9, 0xc9, 0x74, 0x3a, 0xfe, 0x79, 0x38, 0x8b, 0xd9, 0x01, 0x34, 0x47, 0xd3, 0xe9, 0xf8,
	0x34, 0x99, 0x9e, 0xa6, 0xbf, 0x83, 0xda, 0x6d, 0x6f, 0xb3, 0xb1, 0x77, 0x77, 0x87, 0xf0, 0x76,
	0xc4, 0xf0, 0xec, 0xc3, 0xd1, 0x34, 0xfd, 0xf9, 0x74, 0x92, 0x5c, 0x5c, 0x1f, 0xc2, 0x48, 0x06,
	0xd8, 0x4f, 0xd0, 0x92, 0xa8, 0xeb, 0x24, 0x8c, 0x83, 0x85, 0x8c, 0xb5, 0x69, 0x61, 0xa5, 0x43,
	0x39, 0xac, 0x31, 0x52, 0x11, 0xf6, 0x2b, 0xb4, 0x05, 0xed, 0xc3, 0xf4, 0x72, 0x34, 0x0e, 0x03,
	0x2f, 0xc3, 0xdd, 0xab, 0xc6, 0x7d, 0x9f, 0x8d, 0xe5, 0xbc, 0xe6, 0x08, 0x85, 0xd8, 0x21, 0xf8,
	0x02, 0x78, 0x16, 0xfd, 0x1d, 0x7e, 0xd8, 0xdf, 0x0b, 0x6e, 0x64, 0xc4, 0xfb, 0xd5, 0xc4, 0x67,
	0x7c, 0x30, 0x47, 0xb6, 0x46, 0x38, 0x56, 0x60, 0xf6, 0x7b, 0xc1, 0x4d, 0x67, 0x66, 0xbf, 0x57,
	0x64, 0xf6, 0x7b, 0x38, 0x8d, 0x67, 0xe3, 0xe9, 0x30, 0x09, 0x16, 0x5d, 0xd2, 0xf8, 0x2c, 0x1d,
	0x4a, 0xd2, 0x98, 0x45, 0x30, 0x2d, 0x9a, 0x24, 0xfb, 0x7b, 0xc1, 0x92, 0x0b, 0xed, 0x20, 0x1d,
	0x4a, 0x68, 0x59, 0x44, 0xa3, 0xf5, 0x7b, 0xc1, 0xb2, 0x23, 0x4d, 0xec, 0x55, 0xd1, 0xfa, 0x3d,
	0x36, 0x80, 0x8e, 0xa0, 0xc5, 0xe2, 0x48, 0xea, 0x19, 0x70, 0xab, 0x1a, 0xf8, 0xe2, 0x0c, 0x9f,
	0x49, 0x7b, 0x44, 0x82, 0x45, 0x6c, 0xbf, 0x17, 0x80, 0x3b, 0x56, 0x2c, 0x95, 0x60, 0xfb, 0x3d,
	0x5c, 0x90, 0x31, 0x4f, 0x65, 0xc3, 0xa5, 0x20, 0x5f, 0x44, 0x2a, 0x97, 0x79, 0x41, 0xf2, 0x90,
	0x0e, 0xec, 0xf7, 0x82, 0xa6, 0x2b, 0x50, 0xac, 0x11, 0x01, 0xb5, 0x15, 0x26, 0x17, 0xd1, 0xe4,
	0x63, 0xd0, 0x72, 0x02, 0x66, 0x63, 0x29, 0x30, 0x0b, 0x61, 0xe0, 0x25, 0xdf, 0x72, 0xdb, 0x05,
	0x38, 0x28, 0x6e, 0x79, 0x50, 0xd8, 0xf2, 0x25, 0xdf, 0xb2, 0xef, 0x0a, 0xd4, 0xb6, 0xcc, 0x43,
	0xec, 0x18, 0xba, 0x02, 0xc8, 0x9b, 0xdc, 0xe9, 0xd5, 0x6e, 0xd0, 0x71, 0x39, 0xec, 0xdf, 0xb2,
	0xe1, 0xc7, 0xbb, 0xe4, 0xb0, 0x45, 0x90, 0x9e, 0x4d, 0xda, 0x4a, 0x83, 0xae, 0xdb, 0xd9, 0xa4,
	0x63, 0xb5, 0xb3, 0x49, 0x43, 0xec, 0x0d, 0x30, 0x01, 0xbc, 0x08, 0x67, 0x61, 0x12, 0x25, 0xd1,
	0x55, 0x18, 0xb0, 0x0c, 0xba, 0x5d, 0x0d, 0x3d, 0x94, 0xe3, 0x39, 0xb8, 0x33, 0xd2, 0xc2, 0xec,
	0x95, 0xca, 0x42, 0x1c, 0x4d, 0x3e, 0x8e, 0xc3, 0x64, 0x3a, 0x09, 0x56, 0x32, 0xf6, 0x03, 0x6b,
	0x31, 0xf1, 0xe1, 0x1c, 0xed, 0x8f, 0x68, 0x74, 0xe3, 0x11, 0xf8, 0x5a, 0xcb, 0x67, 0x1d, 0xf0,
	0xfe, 0x0a, 0xaf, 0x83, 0xda, 0xed, 0xda, 0xe6, 0xf2, 0x61, 0xfa, 0x91, 0xad, 0xc2, 0xcd, 0xab,
	0xe1, 0xf8, 0x32, 0x0c, 0x16, 0xb2, 0x18, 0x7f, 0xf8, 0x72, 0xe1, 0x8b, 0xda, 0xc6, 0xd7, 0xd0,
	0xd1, 0xbb, 0xbc, 0x6d, 0x7e, 0x13, 0xcf, 0xff, 0x06, 0xba, 0x85, 0xb6, 0x6e, 0x03, 0xd4, 0x30,
	0xe0, 0x31, 0xb0, 0x62, 0x17, 0xb7, 0x11, 0x96, 0xca, 0x09, 0x79, 0x15, 0xda, 0x08, 0x8b, 0xc6,
	0x24, 0xa8, 0x1e, 0x6d, 0x9b, 0xbf, 0x60, 0x9c, 0xaf, 0xba, 0xb2, 0x6d, 0xfe, 0xcd, 0xb2, 0xf9,
	0x8e, 0xeb, 0xf7, 0xf0, 0xfc, 0x6f, 0x61, 0xc5, 0xd0, 0x76, 0x6d, 0x08, 0xbf, 0x02, 0xe1, 0xb8,
	0x8a, 0x8e, 0xb1, 0x14, 0x50, 0x43, 0xb5, 0x01, 0xba, 0xa5, 0x00, 0xc7, 0x15, 0x30, 0x33, 0x40,
	0x35, 0x4c, 0x1b, 0xa0, 0x6e, 0x04, 0x0c, 0xdc, 0xb7, 0xd0, 0x2a, 0x05, 0x38, 0x6e, 0xe1, 0x06,
	0x06, 0xbc, 0x16, 0xe7, 0x40, 0xba, 0x9f, 0x01, 0xb1, 0x8d, 0x11, 0xed, 0xbd, 0x5b, 0x5a, 0x17,
	0x11, 0xd3, 0x31, 0xfb, 0x58, 0xe5, 0x57, 0x36, 0x41, 0x03, 0x79, 0x0b, 0x93, 0x1b, 0x7b, 0x6b,
	0x1a, 0x99, 0x4f, 0xc6, 0xdc, 0x13, 0x58, 0x33, 0xf6, 0x41, 0x03, 0xfb, 0x21, 0x65, 0x7f, 0xa2,
	0xb1, 0x15, 0x00, 0xf3, 0xff, 0x80, 0x55, 0x53, 0x2f, 0x34, 0xe0, 0x77, 0x28, 0x3e, 0x28, 0x2c,
	0x3d, 0x9f, 0x8f, 0xe8, 0x77, 0xfe, 0x59, 0x87, 0xa5, 0x83, 0x49, 0x92, 0xb9, 0xf6, 0x53, 0x68,
	0x44, 0x93, 0x44, 0x53, 0xed, 0x4f, 0x35, 0x4a, 0x3e, 0x38, 0xfd, 0x8d, 0x45, 0xbb, 0x1e, 0x89,
	0x67, 0xf6, 0x03, 0x34, 0x05, 0x06, 0x69, 0xf6, 0x67, 0x95, 0x1c, 0x25, 0xd9, 0x10, 0xc9, 0x00,
	0xfb, 0x11, 0x5a, 0x39, 0x89, 0x28, 0xf6, 0xdd, 0x2a, 0x14, 0x16, 0xec, 0x46, 0xa4, 0x22, 0xec,
	0x17, 0x68, 0xe7, 0x30, 0xaa, 0xd7, 0x9b, 0x55, 0x34, 0x22, 0xd7, 0xcd, 0x08, 0x85, 0x74, 0x9e,
	0x54, 0x6b, 0x3b, 0x4f, 0xaa, 0x42, 0x84, 0x42, 0x28, 0x6d, 0x58, 0xab, 0x2b, 0xd3, 0x86, 0xa4,
	0x9a, 0xa7, 0x8d, 0x3b, 0xb5, 0x22, 0x61, 0xa5, 0xae, 0x24, 0x21, 0xa1, 0xe6, 0x24, 0xee, 0xd3,
	0x84, 0x24, 0x75, 0xda, 0x46, 0x12, 0xfb, 0x93, 0xa4, 0x7e, 0x8f, 0x3d, 0x07, 0x3f, 0x27, 0x69,
	0x2a, 0x7d, 0xaf, 0x0a, 0x46, 0x45, 0xba, 0x15, 0xe1, 0x58, 0x01, 0x29, 0x35, 0xda, 0x01, 0x29,
	0xef, 0x36, 0x11, 0x8e, 0xa1, 0x82, 0x23, 0x0a, 0x5d, 0x59, 0x70, 0x58, 0xa0, 0x79, 0xc1, 0xe5,
	0xfe, 0x4c, 0x61, 0x52, 0x9f, 0xad, 0x30, 0x79, 0x17, 0x89, 0x54, 0x04, 0xc3, 0xb0, 0x3a, 0x57,
	0xc3, 0x90, 0x38, 0xe7, 0x30, 0xee, 0xcd, 0x0a, 0x46, 0xb4, 0xb9, 0x12, 0x36, 0x28, 0x6c, 0x73,
	0xa0, 0x6f, 0x93, 0x28, 0xb3, 0x15, 0x46, 0xb7, 0x99, 0xfb, 0xf2, 0x21, 0x74, 0x72, 0x98, 0xae,
	0xcb, 0x95, 0x87, 0x4a, 0x65, 0x99, 0x1f, 0xaa, 0x74, 0x65, 0x7c, 0x0e, 0x48, 0x95, 0x2d, 0xe7,
	0xa0, 0x44, 0x59, 0x9c, 0x43, 0xe6, 0xc9, 0x2f, 0xa1, 0x9b, 0xc3, 0x0a, 0x9a, 0xbc, 0x55, 0x05,
	0xd4, 0x25, 0xd9, 0x8f, 0x68, 0x94, 0x1d, 0xc9, 0x9d, 0xeb, 0x8a, 0x7c, 0xdf, 0x52, 0x30, 0x58,
	0x90, 0xdb, 0x11, 0x09, 0x6e, 0x7c, 0x05, 0x6d, 0xda, 0xa8, 0xf1, 0x6b, 0xc3, 0xb3, 0xe9, 0xf1,
	0x23, 0xf0, 0xb5, 0xf6, 0x6c, 0x9b, 0xde, 0xd4, 0xc4, 0x4e, 0x6f, 0xc9, 0xb6, 0xf9, 0x35, 0x4d,
	0x27, 0x0a, 0x4d, 0xd8, 0x06, 0x58, 0x2a, 0x05, 0x18, 0x7c, 0xc4, 0xb3, 0xa9, 0xb1, 0x48, 0x80,
	0xd9, 0x8c, 0x3d, 0x9b, 0x19, 0x8b, 0xe9, 0x66, 0x31, 0xf6, 0x6c, 0x62, 0x8c, 0xa6, 0x3b, 0x2e,
	0xde, 0xd3, 0x6e, 0x06, 0xc5, 0x26, 0x6a, 0x23, 0xf8, 0xe5, 0x04, 0xc7, 0x35, 0x74, 0x4c, 0x25,
	0x50, 0x22, 0xc5, 0x9e, 0x4d, 0x8a, 0xf1, 0x7c, 0xc7, 0xff, 0xcf, 0x8c, 0xf3, 0xcd, 0x4a, 0xec,
	0xd9, 0x94, 0x58, 0xcc, 0x1f, 0xb8, 0xaf, 0xbf, 0x55, 0x36, 0xdf, 0x71, 0xfd, 0x44, 0x88, 0x7f,
	0xcf, 0x4f, 0xa0, 0xd4, 0x87, 0xbd, 0xb9, 0x7d, 0x78, 0x20, 0x53, 0x6b, 0xd4, 0x61, 0x6f, 0x4e,
	0x1d, 0x7e, 0x0b, 0xab, 0xa6, 0x86, 0x67, 0x40, 0xcf, 0x65, 0xc3, 0x6f, 0x60, 0xc5, 0xd0, 0xf7,
	0x0c, 0xf4, 0x79, 0x64, 0xf8, 0xdf, 0x00, 0x80, 0x57, 0x4a, 0xe6, 0xc3, 0xcf, 0xa1, 0xcd, 0x5f,
	0xb6, 0x9a, 0x12, 0xeb, 0x8d, 0x5e, 0x4d, 0xc9, 0x3f, 0x62, 0x31, 0x6e, 0xc6, 0x28, 0xc4, 0x8e,
	0xc0, 0x47, 0x48, 0xa4, 0xc7, 0x0f, 0x1c, 0x98, 0x4a, 0x92, 0x5b, 0x31, 0x8e, 0xb1, 0x97, 0xd0,
	0x51, 0x54, 0xa2, 0xca, 0xdb, 0x76, 0x2c, 0x16, 0xe6, 0x76, 0x4c, 0x82, 0xec, 0x35, 0x74, 0x15,
	0x98, 0x6a, 0xf3, 0x8e, 0x9d, 0x4c, 0xe4, 0xd9, 0x8f, 0x69, 0xd4, 0xc0, 0x96, 0x0a, 0xed, 0xca,
	0x16, 0x0a, 0x41, 0xd9, 0xfd, 0x1e, 0x4d, 0x33, 0xd6, 0x69, 0x87, 0x34, 0x23, 0xa9, 0x96, 0x69,
	0xe6, 0x5e, 0x4d, 0xa8, 0x58, 0xad, 0x1d, 0xa8, 0x48, 0xb0, 0x25, 0x95, 0x3b, 0xb6, 0x4e, 0x95,
	0x9a, 0xed, 0x46, 0x95, 0x26, 0x1b, 0xe3, 0x18, 0x7b, 0x0b, 0x4c, 0x51, 0x35, 0xe5, 0x7e, 0x68,
	0x07, 0x53, 0xf1, 0xee, 0xc4, 0x5a, 0xd8, 0x84, 0x97, 0xfa, 0xed, 0x8c, 0x17, 0x4b, 0xd7, 0xf0,
	0xfd, 0x1e, 0x2d, 0x68, 0xa2, 0xe2, 0x0e, 0x05, 0x8d, 0x85, 0x5c, 0x16, 0x74, 0xee, 0xe4, 0x05,
	0xb0, 0xd4, 0x72, 0x47, 0xb0, 0xfc, 0xf6, 0x3d, 0x26, 0x41, 0x0d, 0x8c, 0x15, 0xdd, 0x05, 0x8c,
	0x44, 0x5d, 0x81, 0xb9, 0xab, 0x13, 0x30, 0xd1, 0x75, 0x07, 0xf0, 0xc0, 0x94, 0x8a, 0x81, 0x21,
	0x15, 0x44, 0xdd, 0x1d, 0xc1, 0x85, 0x54, 0xe4, 0x0e, 0x7f, 0x02, 0x2b, 0x0a, 0xac, 0x6b, 0xbc,
	0x43, 0x71, 0x50, 0x99, 0x97, 0xc5, 0x21, 0x7d, 0x5e, 0x3b, 0x43, 0xa4, 0xf4, 0x4e, 0x67, 0xa8,
	0xc4, 0x1e, 0x9d, 0x61, 0xe6, 0xf6, 0xef, 0x61, 0x55, 0x81, 0x0b, 0x7a, 0xbf, 0x6b, 0x87, 0xeb,
	0x92, 0xcf, 0xe2, 0xc2, 0x1f, 0xd8, 0x3b, 0x9c, 0x1d, 0x5d, 0xf5, 0x3f, 0x77, 0x2a, 0x42, 0x2c,
	0xfc, 0xdd, 0x58, 0x8f, 0xa7, 0xd6, 0x5b, 0x78, 0x0d, 0xe1, 0x17, 0x64, 0xdd, 0xa6, 0xfd, 0x8f,
	0x81, 0x15, 0xdf, 0x39, 0x36, 0x42, 0x53, 0xfb, 0x3e, 0xd5, 0xf0, 0x7a, 0xb1, 0x21, 0x88, 0xfc,
	0x3f, 0x81, 0x55, 0xd3, 0x7b, 0xc4, 0xc6, 0x58, 0xaa, 0x62, 0x18, 0x0c, 0xac, 0x6e, 0xbb, 0x02,
	0xa0, 0x64, 0x98, 0x6f, 0x01, 0x75, 0xdb, 0x2d, 0x00, 0x11, 0xcc, 0x17, 0x81, 0xba, 0xed, 0x22,
	0x40, 0x09, 0x8e, 0xbb, 0x20, 0x77, 0x81, 0xef, 0x60, 0xcd, 0xd8, 0xda, 0x6d, 0x10, 0xbf, 0x12,
	0xe2, 0xb8, 0x92, 0x4e, 0x49, 0x69, 0x94, 0x5c, 0x0a, 0xea, 0xb6, 0x4b, 0x81, 0x86, 0x70, 0x5c,
	0x05, 0x2b, 0x43, 0x98, 0xaf, 0x06, 0x75, 0xdb, 0xd5, 0x00, 0x21, 0x06, 0xee, 0x1b, 0x69, 0x55,
	0x20, 0x1c, 0x37, 0x72, 0x83, 0x7e, 0x3b, 0xbc, 0x66, 0xec, 0x9b, 0x06, 0xc8, 0x1c, 0x77, 0x84,
	0x57, 0x38, 0xd3, 0xc6, 0x6b, 0x42, 0x7d, 0xce, 0x6b, 0xc2, 0x3b, 0xb8, 0x55, 0xd2, 0x35, 0x0d,
	0xf4, 0xb9, 0x6e, 0x0a, 0x27, 0xb0, 0x6e, 0xee, 0x99, 0x86, 0x7f, 0x30, 0xc7, 0x65, 0x61, 0xb4,
	0xc8, 0xff, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x12, 0xbd, 0x8d, 0xe7, 0x22, 0x00,
	0x00,
}
